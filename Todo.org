Todo

* RESUME
  --

* NOW
  - [ ] Make basic TODO app.
  - [ ] Hover state on <Switch>
  - [ ] On backspace, if text still exists and caret is in
    [pos 0]. Merge text with previous item.
  - [ ] Remove InputField at some point and make last item
    undeletable.
  - [ ] Re-evaluate if there's a better method than using
    .insertAfter/.insertBefore on payload.
  - [ ] api.workspace.cycleNextList/cyclePrevList
  - [ ] Find out why redux dev tools 'persist' feature isn't working
    correctly. Probably a conflict with uniqId. How to make work with
    uniqId?
  - [ ] Fork react-redux to pass down {api} into mapDispatchToProps.
  - [ ] Re-evaluate the use of uniqId. It's probably conflicting with
    redux devtool persist feature.
  - [ ] Fix destroy note.
  - [ ] Remove api.notes.create()
  - [X] Deprecate and remove .insertBefore and insertAfter
    properties. Use pos instead and move calls to api.lists.createNote
    to <List>
  - [ ] Remove all references to .insertAfter/.insertBefore
  - [ ] Remove NOTE__CREATE action and move to LIST__CREATE_NOTE.
  - [ ] Use listId, noteId instead of id/list/note in api/actions/reducers.

* BRANCH: refactor/state
  - [ ] Remove state/order and shift functionality into list.todos

* UX
  - [ ] Handle SHIFT-UP.

* Learn
  - [ ] GraphQL.
  - [ ] CSS Grid.
  - [ ] Django basics.

* TODO
  - [ ] Add persisted data layer (todo items).
  - [ ] Basic styling (CSS grid based, visually grid based).
  - [ ] Add networking layer.
    - [ ] Persistence.
    - [ ] CRUD operations.
  - [ ] Add linting.

* Features
  - [ ] Change single-line <input> elements to multi-line editables.
  - [ ] Search
  - [ ] Filter
  - [ ] Sort
  - [ ] Add workspaces/tags/organization/etc.
