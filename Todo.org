Todo

* RESUME
  --

* NOW
  - [ ] Make basic TODO app.
  - [ ] Hover state on <Switch>
  - [ ] On backspace, if text still exists and caret is in
    [pos 0]. Merge text with previous item.
  - [ ] Title field.
  - [ ] Remove InputField at some point and make last item
    undeletable.
  - [ ] Add workspaces/tags/organization/etc.
  - [ ] Remove redux-logger.
  - [::MIDDLEWARE::] Write middleware to automaticanlly add .payload {} and meta {}
    to action if missing. Then refactor reducers to always assume a
    payload object.
  - [ ] Merge state/order and state/meta into state/todos.
  - [ ] Add multiple lists.
  - [ ] In state submodules, use more consistent export default form:
    todos.actions, todos.reducer. export default {actions, reducer}
  - [ ] api.workspace.cycleNextList/cyclePrevList
  - [ ] Find out why redux dev tools 'persist' feature isn't working
    correctly. Probably a conflict with uniqId. How to make work with
    uniqId?

* BRANCH: refactor/state
  - [ ] Remove state/order and shift functionality into list.todos

* UX
  - [ ] Handle SHIFT-UP.

* Learn
  - [ ] GraphQL.
  - [ ] CSS Grid.
  - [ ] Django basics.

* TODO
  - [ ] Add persisted data layer (todo items).
  - [ ] Basic styling (CSS grid based, visually grid based).
  - [ ] Add networking layer.
    - [ ] Persistence.
    - [ ] CRUD operations.
  - [ ] Add linting.

* Features
  - Search
  - Filter
  - Sort
